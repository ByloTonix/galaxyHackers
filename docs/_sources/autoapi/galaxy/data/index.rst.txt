galaxy.data
===========

.. py:module:: galaxy.data

.. autoapi-nested-parse::

   Script to get dataloaders



Attributes
----------

.. autoapisummary::

   galaxy.data.TORCHVISION_MEAN
   galaxy.data.TORCHVISION_STD
   galaxy.data.main_transforms


Classes
-------

.. autoapisummary::

   galaxy.data.DataPart
   galaxy.data.ClusterDataset


Functions
---------

.. autoapisummary::

   galaxy.data.bar_progress
   galaxy.data.read_gaia
   galaxy.data.download_data
   galaxy.data.read_dr5
   galaxy.data.to_hms_format
   galaxy.data.to_dms_format
   galaxy.data.read_mc
   galaxy.data.get_all_clusters
   galaxy.data.get_cluster_catalog
   galaxy.data.filter_candiates
   galaxy.data.candidates_to_df
   galaxy.data.generate_candidates_dr5
   galaxy.data.generate_candidates_mc
   galaxy.data.create_negative_class_dr5
   galaxy.data.create_negative_class_mc
   galaxy.data.create_data_dr5
   galaxy.data.create_data_mc
   galaxy.data.create_data_gaia
   galaxy.data.train_val_test_split
   galaxy.data.ddos
   galaxy.data.check_catalogs
   galaxy.data.create_dataloaders


Module Contents
---------------

.. py:data:: TORCHVISION_MEAN
   :value: [23.19058950345032, 22.780995295792817]


.. py:data:: TORCHVISION_STD
   :value: [106.89880134344101, 100.32284196853638]


.. py:data:: main_transforms

.. py:class:: DataPart

   Bases: :py:obj:`str`, :py:obj:`enum.Enum`


   str(object='') -> str
   str(bytes_or_buffer[, encoding[, errors]]) -> str

   Create a new string object from the given object. If encoding or
   errors is specified, then the object must expose a data buffer
   that will be decoded using the given encoding and error handler.
   Otherwise, returns the result of object.__str__() (if defined)
   or repr(object).
   encoding defaults to sys.getdefaultencoding().
   errors defaults to 'strict'.


   .. py:attribute:: TRAIN
      :value: 'train'



   .. py:attribute:: VALIDATE
      :value: 'validate'



   .. py:attribute:: TEST_DR5
      :value: 'test_dr5'



   .. py:attribute:: TEST_MC
      :value: 'test_mc'



   .. py:attribute:: GAIA
      :value: 'gaia'



.. py:class:: ClusterDataset(images_dir_path: str, description_csv_path: str, transform=None)

   Bases: :py:obj:`torch.utils.data.Dataset`


   An abstract class representing a :class:`Dataset`.

   All datasets that represent a map from keys to data samples should subclass
   it. All subclasses should overwrite :meth:`__getitem__`, supporting fetching a
   data sample for a given key. Subclasses could also optionally overwrite
   :meth:`__len__`, which is expected to return the size of the dataset by many
   :class:`~torch.utils.data.Sampler` implementations and the default options
   of :class:`~torch.utils.data.DataLoader`. Subclasses could also
   optionally implement :meth:`__getitems__`, for speedup batched samples
   loading. This method accepts list of indices of samples of batch and returns
   list of samples.

   .. note::
     :class:`~torch.utils.data.DataLoader` by default constructs an index
     sampler that yields integral indices.  To make it work with a map-style
     dataset with non-integral indices/keys, a custom sampler must be provided.


   .. py:attribute:: images_dir_path


   .. py:attribute:: description_df


   .. py:attribute:: transform


   .. py:method:: __len__()


   .. py:method:: __getitem__(idx)


   .. py:method:: _read_img(fits_path: pathlib.Path)
      :staticmethod:



.. py:function:: bar_progress(current, total, width=80)

.. py:function:: read_gaia()

.. py:function:: download_data()

.. py:function:: read_dr5()

.. py:function:: to_hms_format(time_str)

.. py:function:: to_dms_format(time_str)

.. py:function:: read_mc()

.. py:function:: get_all_clusters()

   Concat clusters from act_dr5 and madcows to create negative classes in samples


.. py:function:: get_cluster_catalog() -> astropy.coordinates.SkyCoord

.. py:function:: filter_candiates(candidates: astropy.coordinates.SkyCoord, max_len: int) -> astropy.coordinates.SkyCoord

.. py:function:: candidates_to_df(candidates: astropy.coordinates.SkyCoord) -> pandas.DataFrame

.. py:function:: generate_candidates_dr5() -> astropy.coordinates.SkyCoord

.. py:function:: generate_candidates_mc()

   Create sample from MadCows catalogue


.. py:function:: create_negative_class_dr5()

   Create sample from dr5 clsuter catalogue


.. py:function:: create_negative_class_mc()

.. py:function:: create_data_dr5()

.. py:function:: create_data_mc()

.. py:function:: create_data_gaia()

.. py:function:: train_val_test_split()

.. py:function:: ddos()

.. py:function:: check_catalogs()

.. py:function:: create_dataloaders()

