galaxy.models.spinalnet_vgg
===========================

.. py:module:: galaxy.models.spinalnet_vgg


Classes
-------

.. autoapisummary::

   galaxy.models.spinalnet_vgg.SpinalNet_VGG


Functions
---------

.. autoapisummary::

   galaxy.models.spinalnet_vgg.load_model


Module Contents
---------------

.. py:class:: SpinalNet_VGG(num_ftrs, half_in_size, layer_width, num_class=2)

   Bases: :py:obj:`torch.nn.Module`


   Base class for all neural network modules.

   Your models should also subclass this class.

   Modules can also contain other Modules, allowing to nest them in
   a tree structure. You can assign the submodules as regular attributes::

       import torch.nn as nn
       import torch.nn.functional as F

       class Model(nn.Module):
           def __init__(self):
               super().__init__()
               self.conv1 = nn.Conv2d(1, 20, 5)
               self.conv2 = nn.Conv2d(20, 20, 5)

           def forward(self, x):
               x = F.relu(self.conv1(x))
               return F.relu(self.conv2(x))

   Submodules assigned in this way will be registered, and will have their
   parameters converted too when you call :meth:`to`, etc.

   .. note::
       As per the example above, an ``__init__()`` call to the parent class
       must be made before assignment on the child.

   :ivar training: Boolean represents whether this module is in training or
                   evaluation mode.
   :vartype training: bool


   .. py:attribute:: half_in_size


   .. py:attribute:: fc_spinal_layer1


   .. py:attribute:: fc_spinal_layer2


   .. py:attribute:: fc_spinal_layer3


   .. py:attribute:: fc_spinal_layer4


   .. py:attribute:: fc_out


   .. py:method:: forward(x)


.. py:function:: load_model(num_class=2)

